"""
# 問題文
宝箱には N 個の品物が入っており、それぞれ 1 から N までの番号が付けられています。
品物 i の重さは w_i であり、価値は v_i です。

太郎君は、いくつかの品物を選んで持ち帰りたいと考えています。
しかし、彼のナップザックには容量制限があるので、重さの合計が W 以下になるようにする必要があります。
価値の合計としてあり得る最大の値はいくつですか。

# 制約
* 1≤N≤100
* 1≤W≤100000
* 1≤w_i≤W
* 1≤v_i≤10^9
* 入力はすべて整数
"""

# NOTE: 以下勉強になった点
#   * 最後の出力は max(dp[N]) じゃないといけないことに注意
#   * 初期化を起こりうる v 合計のマイナスより小さい値にすると、
#     dp[i-1][:]が0以上かの条件分岐をなくすことができる！


def main():
    N, W = map(int, input().split())
    w, v = [0] * (N + 1), [0] * (N + 1)
    for i in range(1, N + 1):
        w[i], v[i] = map(int, input().split())

    init = -(10**9 * 100) - 1  # < -(max(v) * max(N))
    dp = [[init] * (W + 1) for _ in range(N + 1)]

    dp[0][0] = 0
    for i in range(1, N + 1):  # O(N*W)
        for j in range(W + 1):
            dp[i][j] = dp[i - 1][j]
            if j >= w[i]:
                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - w[i]] + v[i])

    print(max(dp[N]))


if __name__ == "__main__":
    main()
